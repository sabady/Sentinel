name: 'Terraform CI/CD'

# Workflow Flow:
# 1. terraform-verify: Always runs (validation, format check, init)
# 2. terraform-plan: Runs on PRs and pushes to main/develop (creates execution plan)
# 3. terraform-apply: Runs on push to main (production deployment)
# 4. terraform-apply-develop: Runs on push to develop (staging deployment)
# 5. terraform-apply-manual: Runs on manual dispatch (manual deployment)
# 6. terraform-destroy: Runs on manual dispatch (manual destruction)

# IMPORTANT: All jobs require AWS credentials because they use S3 backend for state storage
# Make sure AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY secrets are configured in GitHub

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy
      environment:
        description: 'Environment to deploy to (only for deploy action)'
        required: false
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  TF_VERSION: '1.13.1'
  AWS_REGION: 'us-west-2'

jobs:
  terraform-verify:
    name: 'Terraform Verify'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS Credentials
      run: |
        echo "Verifying AWS credentials..."
        aws sts get-caller-identity
        echo "AWS region: ${{ env.AWS_REGION }}"
        echo "Checking S3 bucket access..."
        aws s3 ls s3://sentinel-terraform-state-721500739616 || echo "S3 bucket not accessible"

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Validate
      run: terraform validate

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: terraform-verify
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS Credentials
      run: |
        echo "Verifying AWS credentials..."
        aws sts get-caller-identity
        echo "AWS region: ${{ env.AWS_REGION }}"
        echo "Checking S3 bucket access..."
        aws s3 ls s3://sentinel-terraform-state-721500739616 || echo "S3 bucket not accessible"

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: tfplan

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [terraform-verify, terraform-plan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS Credentials
      run: |
        echo "Verifying AWS credentials..."
        aws sts get-caller-identity
        echo "AWS region: ${{ env.AWS_REGION }}"
        echo "Checking S3 bucket access..."
        aws s3 ls s3://sentinel-terraform-state-721500739616 || echo "S3 bucket not accessible"

    - name: Terraform Init
      run: terraform init

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: .

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

  terraform-apply-develop:
    name: 'Terraform Apply (Develop)'
    runs-on: ubuntu-latest
    needs: [terraform-verify, terraform-plan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS Credentials
      run: |
        echo "Verifying AWS credentials..."
        aws sts get-caller-identity
        echo "AWS region: ${{ env.AWS_REGION }}"
        echo "Checking S3 bucket access..."
        aws s3 ls s3://sentinel-terraform-state-721500739616 || echo "S3 bucket not accessible"

    - name: Terraform Init
      run: terraform init

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: .

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

  terraform-apply-manual:
    name: 'Terraform Apply (Manual)'
    runs-on: ubuntu-latest
    needs: terraform-verify
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS Credentials
      run: |
        echo "Verifying AWS credentials..."
        aws sts get-caller-identity
        echo "AWS region: ${{ env.AWS_REGION }}"
        echo "Checking S3 bucket access..."
        aws s3 ls s3://sentinel-terraform-state-721500739616 || echo "S3 bucket not accessible"

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

  terraform-destroy:
    name: 'Terraform Destroy (Manual)'
    runs-on: ubuntu-latest
    needs: terraform-verify
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS Credentials
      run: |
        echo "Verifying AWS credentials..."
        aws sts get-caller-identity
        echo "AWS region: ${{ env.AWS_REGION }}"
        echo "Checking S3 bucket access..."
        aws s3 ls s3://sentinel-terraform-state-721500739616 || echo "S3 bucket not accessible"

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan Destroy
      run: terraform plan -destroy -out=tfdestroy

    - name: Terraform Destroy
      run: terraform apply -auto-approve tfdestroy
